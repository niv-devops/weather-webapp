name: Python weather webapp

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.12
      uses: actions/setup-python@v5.2.0
      with:
        python-version: 3.12

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2.3.6
      env:
        GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      if: github.event_name == 'push'
      run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Analysing the code with pylint
      if: github.event_name == 'push'
      run: pylint --fail-under=8 $(git ls-files '*.py')
      
    - name: SAST with Bandit
      uses: mdegis/bandit-action@v1.1
      with:
        GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
        level: high
        exit_zero: true  

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=critical
      
    - name: Run Hadolint to check for vulnerabilities in Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        failure-threshold: error

    #- name: Test with pytest
    #  run: pytest tests/

  build:
    runs-on: ubuntu-latest
    needs: test   
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build Image
      id: build_image
      uses: redhat-actions/buildah-build@v2
      with:
        image: weather-webapp
        tags: latest ${{ github.sha }}
        containerfiles: Dockerfile
        
    - name: Push To GHCR
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build_image.outputs.image }}
        tags: ${{ steps.build_image.outputs.tags }}
        registry: ghcr.io/${{ github.repository_owner }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Pull image from GHCR
      run: docker pull ghcr.io/${{ github.repository }}:latest

    - name: Run Snyk to check for vulnerabilities in container
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/${{ github.repository }}:latest
        args: --threshold=critical
      continue-on-error: true

    - name: Get Image Digest
      id: get_digest
      run: |
        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository }}:latest)
        echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.6.0
        
    - name: Sign image with a key
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${{ env.IMAGE_DIGEST }}
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

    - name: Verify the Image
      run: cosign verify --key env://COSIGN_PUBLIC_KEY ${{ env.IMAGE_DIGEST }}
      env:
        COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
 
  monitor:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: 'C07PEEVQ5JS'
        slack-message: |
          GitHub workflow results:
          -----------------------
          Test job status: ${{ needs.test.result }} - ${{ needs.test.result == 'success' && '✅ Success' || '❌ Failed' }}
          Build job status: ${{ needs.build.result }} - ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }}
          -------------------------------------------
          Details:
          Workflow Status: ${{ job.status }} - ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
          Workflow URL: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
